#include "pch.h"
#include "CppUnitTest.h"
#include "C:\Users\cjmar\OneDrive\Documents\Professional\ReverseExponentsCalculator\ReverseExponentsCalculator\main.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace PlatformAerospaceUnitTests
{
	TEST_CLASS(PlatformAerospaceUnitTests)
	{
	public:
		
		TEST_METHOD(Test1)
		{
			int a = 0;
			reverseExponents test1 = reverseExponents(a);
			string c = "1";
			Assert::AreEqual(test1.getC(), c);
		}

		TEST_METHOD(Test2)
		{
			int a = 1;
			reverseExponents test2 = reverseExponents(a);
			string c = "1";
			Assert::AreEqual(test2.getC(), c);
		}

		TEST_METHOD(Test3)
		{
			int a = 2;
			reverseExponents test3 = reverseExponents(a);
			string c = "4";
			Assert::AreEqual(test3.getC(), c);
		}

		TEST_METHOD(Test4)
		{
			int a = 5;
			reverseExponents test4 = reverseExponents(a);
			string c = "3125";
			Assert::AreEqual(test4.getC(), c);
		}

		TEST_METHOD(Test5)
		{
			int a = 10;
			reverseExponents test5 = reverseExponents(a);
			string c = "10";
			Assert::AreEqual(test5.getC(), c);
		}

		TEST_METHOD(Test6)
		{
			int a = 24;
			reverseExponents test6 = reverseExponents(a);
			string c = "9308338151941866618592771645958951941937449991757235224576";
			Assert::AreEqual(test6.getC(), c);
		}

		TEST_METHOD(Test7)
		{
			int a = 100;
			reverseExponents test7 = reverseExponents(a);
			string c = "100";
			Assert::AreEqual(test7.getC(), c);
		}

		TEST_METHOD(Test8) ///fix
		{
			int a = 123;
			reverseExponents test8 = reverseExponents(a);
			string c = "72367033806371673149109894141163778628811792657571658906010558390395870363798401744095280686155507736404921657070284961721828960592977909542637098897697223102622628566787654091327825453991595140205701412961364188732408936197890553699715836951569999800431957769217006743321026257517932764164662319487914962533302741368207211189494615326552790667720411285474162636765168907211924134973374304496019635376665858559941735703924836467756917247995469583487467791524582153744522107597865277798136080074161485280424274076931083994487111719562249702540362855712911132265966235754355353516703339043001506118520760359577737869472018617942120590873170710805078696371738906375721785723";
			Assert::AreEqual(test8.getC(), c);
		}

		TEST_METHOD(Test9) //fix
		{
			int a = 200;
			reverseExponents test9 = reverseExponents(a);
			string c = "40000";
			Assert::AreEqual(test9.getC(), c);
		}

		TEST_METHOD(Test10) //fix
		{
			int a = 987;
			reverseExponents test10 = reverseExponents(a);
			string c = "32827170916600920759226523730910684057368010581073923440494122659539375292163882295940165320024732571904814896215190997136080353309850660363739438172605253570445757685550316268865232976745494146638273323552048131115389706108697443308391166071997247766136147826922969555830010808207897119351600656728257743849712457625050532600084172908193613813158958812043728421332601444142474458956198447215395078613816014978478709291285118536434789813812094844104486960958617495597506997289112919623568538288308781719010784224873947525845472217700992384775631171336507889425146553672578631803925091281247920780715037895196245699035641283194243922612554273610501796689366822515021403798710426276132707514735576623851297378499944744068184524543532808171074238657692453822297131562456539800494451820325354891544960763724740893464836759663011148423904789220451231157545401676064197009562114831659827255766009853051859996623934465737321037606145171890500008823328544279453457215337872047147598983377138329790313248917210550000817275349272922201815215791230180015150641571110773878673091991006938134012535870167864681360393786299630899345391141163446432533779157078135876446926278931853590360747149532169131646319036891978712001290533555511217361360636951779244219104530647579419079623162106902163465821067308989391888471002124070799183994708407194709547834193315081062359556536872668704937710193683589339939810572572982098849755169046770596696708682274555840974670029931494023925012573557859391911404142027270162337993069382598956091743585025458002052294238517076985775955058997575151413718240181728973707423244933491866948266064866320376011153173565442881493817691005569785587824395619004289120667854568320607306497501026644360194660557065658575833174578646409344257328155359133793368449928452613106347071595806890896137013097088369453869472831751989680048348869889367939068779783198463546698646596108475795618454065896215924411368867589010893269493154403735022364958034361013116262113339230556205831166620563210530552904331570507795197401888535490510355791732172515566039611834282328149683405757533163536249839961615516312355583647914360524725401363970799536195876415479849717408855158497029082926746006031279131943261923957081618490034205798198652321596644086409789351894357322335962318284696022508228206358137878585345146299060610099969951168505170067914414147217221599078226027";
			Assert::AreEqual(test10.getC(), c);
		}

		TEST_METHOD(Test11)
		{
			int a = 4610;
			reverseExponents test11 = reverseExponents(a);
			string c = "7029942355810107721213839268389866561884131493813018471888706976052937970824398955940284237151119270089145417650132126329962739217167957739516631782975549674934906751253777399420350707981600571414489948890857297508939582957696237498153958211829827545600122516985187267655795094430675709508831013518589186486641083803814559507083344886601096651720744092442824369665083633127000818505981055136537351946017048905667391599457545932703478504100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			Assert::AreEqual(test11.getC(), c);
		}
	};
}
